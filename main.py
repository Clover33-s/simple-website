import json
import os
from src.logger import log
from src.generators.idea_generator import IdeaGenerator
from src.generators.stability_ai_generator import StabilityAIGenerator
from src.video.compiler import VideoCompiler
from src.youtube.uploader import YouTubeUploader

def main():
    log.info("Starting AI Content Grinder...")

    try:
        with open('config.json') as f:
            config = json.load(f)
    except FileNotFoundError:
        log.error("Configuration file 'config.json' not found. Please ensure it exists.")
        return

    # Step 1: Generate prompts using the LLM
    prompts = []
    if config.get('llm_generator', {}).get('enabled', False):
        log.info("LLM idea generation is enabled.")
        idea_gen = IdeaGenerator()
        prompts = idea_gen.generate_prompts()
    else:
        log.warning("LLM idea generation is disabled in the config. Cannot generate prompts.")

    # Step 2: Generate images from the prompts using Stability AI
    media_paths = []
    if prompts and config.get('stability_ai', {}).get('enabled', False):
        log.info("Stability AI image generation is enabled.")
        image_gen = StabilityAIGenerator()
        media_paths = image_gen.generate_images(prompts=prompts)
    elif not prompts:
        log.warning("No prompts were generated, so skipping image generation.")
    else:
        log.warning("Stability AI generation is disabled in the config. Cannot generate images.")

    # Step 3: Compile the video and upload it
    if media_paths:
        log.info(f"Successfully generated {len(media_paths)} images. Starting video compilation...")
        output_video_path = "final_video.mp4"
        compiler = VideoCompiler(media_paths)
        compiler.create_compilation(output_path=output_video_path)

        if os.path.exists(output_video_path):
            log.info("Video compiled successfully. Proceeding to upload...")
            uploader = YouTubeUploader()

            video_theme = config.get('llm_generator', {}).get('theme', 'AI-Generated Art')
            video_title = f"AI-Generated Video: {video_theme}"
            video_description = f"A video compilation of fascinating images generated by AI based on the theme: '{video_theme}'."
            video_tags = ["ai", "art", "compilation", "stabilityai", "generativeart", "llm", "openai"]

            uploader.upload_video(output_video_path, video_title, video_description, video_tags)

            try:
                os.remove(output_video_path)
                log.info(f"Removed local video file: {output_video_path}")
            except OSError as e:
                log.error(f"Error removing local video file: {e}")
        else:
            log.error("Video compilation failed. Cannot upload.")
    else:
        log.warning("No media was generated. Exiting.")

    log.info("AI Content Grinder finished.")

if __name__ == "__main__":
    main()